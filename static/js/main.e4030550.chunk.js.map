{"version":3,"sources":["components/ChatWindow.js","components/ChatEntry.js","App.js","index.js"],"names":["ChatWindow","Chatlog","id","className","map","chat","data-time","time","name","key","src","dangerouslySetInnerHTML","__html","ChatEntry","newChat","useState","chatVal","newChatVal","handleSubmit","event","preventDefault","length","document","getElementById","value","onSubmit","autoComplete","onChange","target","placeholder","onClick","type","App","enterChat","SubmitFired","SetSubmitFired","showLoading","loading","Date","getHours","getMinutes","splice","useEffect","data","a","async","fetch","method","headers","Authorization","body","JSON","stringify","question","response","bot_response","json","responseObject","answers","answer","BotApi","objDiv","scrollTop","scrollHeight","newName","ReactDOM","render"],"mappings":"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","file":"static/js/main.e4030550.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./spinkit.css\";\nimport \"./spinkit.min.css\";\nfunction ChatWindow({ Chatlog }) {\n  return (\n    <div id=\"msgBody\" className=\"card-body msg_card_body\">\n      {Chatlog.map((chat) => (\n        <div\n          data-time={chat.time}\n          name={\n            chat.name === \"Bot\" || chat.name === \"loading\"\n              ? \"bubble-sender\"\n              : \"bubble-reciever\"\n          }\n          data-time={chat.time}\n          className={\n            chat.name === \"Bot\" || chat.name === \"loading\"\n              ? \"d-flex justify-content-start mb-4\"\n              : \"d-flex justify-content-end mb-4\"\n          }\n          key={chat.key}\n        >\n          <div className=\"img_cont_msg\">\n            <img\n              src={\n                chat.name === \"Bot\" || chat.name === \"loading\"\n                  ? \"Bot.jpeg\"\n                  : \"logo512.png\"\n              }\n              className=\"rounded-circle user_img_msg\"\n            />\n          </div>\n          <div\n            data-time={chat.time}\n            className=\"msg_cotainer\"\n            dangerouslySetInnerHTML={{\n              __html: `${chat.chat}`,\n            }}\n          ></div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ChatWindow;\n","import React, { useState } from \"react\";\nexport default function ChatEntry({ newChat }) {\n  const [chatVal, newChatVal] = useState([]);\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (chatVal.length > 0) newChat(\"Kola\", chatVal);\n    document.getElementById(\"chatInput\").value = \"\";\n    newChatVal(\"\");\n  };\n  return (\n    <div className=\"card-footer\">\n      <form onSubmit={handleSubmit}>\n        <div className=\"input-group\">\n          <textarea\n            autoComplete=\"false\"\n            onChange={(event) => newChatVal(event.target.value)}\n            id=\"chatInput\"\n            className=\"form-control type_msg\"\n            placeholder=\"Type your message...\"\n          ></textarea>\n          <div\n            id=\"submitBtn\"\n            onClick={handleSubmit}\n            className=\"input-group-append\"\n          >\n            <span type=\"submit\" className=\"input-group-text send_btn\">\n              <i className=\"fas fa-location-arrow\"></i>\n            </span>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport ChatEntry from \"./components/ChatEntry\";\nimport \"./App.css\";\nfunction App() {\n  const [Chatlog, enterChat] = useState([]);\n  const [SubmitFired, SetSubmitFired] = useState([]);\n  const newChat = (newName, newChat) => {\n    SetSubmitFired(Chatlog.length);\n    enterChat([\n      ...Chatlog,\n      {\n        key: Chatlog.length,\n        name: newName,\n        chat: newChat,\n        time: new Date().getHours() + \":\" + new Date().getMinutes(),\n      },\n    ]);\n  };\n  const showLoading = (loading) => {\n    if (loading === true) {\n      enterChat([\n        ...Chatlog,\n        {\n          key: Chatlog.length,\n          name: \"loading\",\n          chat:\n            '<div style=\"margin-bottom: -35px; margin-top: 6px;\" class=\"sk-flow\"><div class=\"sk-flow-dot\"></div><div class=\"sk-flow-dot\"></div><div class=\"sk-flow-dot\"></div></div>',\n          time: new Date().getHours() + \":\" + new Date().getMinutes(),\n        },\n      ]);\n    } else {\n      Chatlog.splice(-1, 1);\n    }\n  };\n  useEffect(() => {\n    var data;\n    if (SubmitFired == 0) {\n      enterChat([\n        ...Chatlog,\n        {\n          key: Chatlog.length,\n          name: \"Bot\",\n          chat: \"Welcome to the chat room, I'm Bot\",\n          time: new Date().getHours() + \":\" + new Date().getMinutes(),\n        },\n      ]);\n    } else {\n      async function BotApi() {\n        showLoading(true);\n\n        try {\n          const response = await fetch(\n            \"https://benjaminbotman.azurewebsites.net/qnamaker/knowledgebases/5632106f-b384-4d61-87d6-93cfc9bc2275/generateAnswer\",\n            {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization:\n                  \"EndpointKey 25b4213b-5dff-40cd-9bfb-7595051ed0a8\",\n              },\n              body: JSON.stringify({\n                question: Chatlog[Chatlog.length - 1].chat,\n              }),\n            }\n          );\n\n          data = { bot_response: \"Server is down try again later\" };\n          let responseObject = (await response.json()).answers;\n          data = { bot_response: responseObject[0].answer };\n          if (data.bot_response === \"No good match found in KB.\")\n            data = { bot_response: \"English pls\" };\n        } catch (error) {\n          data = { bot_response: \"Server is down try again later\" };\n        }\n\n        //This is where you I will call your API.\n        await enterChat([\n          ...Chatlog,\n          {\n            key: Chatlog.length,\n            name: \"Bot\",\n            chat: data.bot_response,\n            time: new Date().getHours() + \":\" + new Date().getMinutes(),\n          },\n        ]);\n        showLoading(false);\n      }\n      BotApi();\n    }\n  }, [SubmitFired]);\n  useEffect(() => {\n    var objDiv = document.getElementById(\"msgBody\");\n    objDiv.scrollTop = objDiv.scrollHeight;\n  });\n  return (\n    <div className=\"card\">\n      <div className=\"card-header msg_head\">\n        <div className=\"d-flex bd-highlight\">\n          <div className=\"img_cont\">\n            <img src=\"Bot.jpeg\" className=\"rounded-circle user_img\" />\n            <span className=\"online_icon\"></span>\n          </div>\n\n          <div className=\"user_info\">\n            <span>Chat with Bot</span>\n          </div>\n        </div>\n      </div>\n      <ChatWindow Chatlog={Chatlog} />\n      <ChatEntry newChat={newChat} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}